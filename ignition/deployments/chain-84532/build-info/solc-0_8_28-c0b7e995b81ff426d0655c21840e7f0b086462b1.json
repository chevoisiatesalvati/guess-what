{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-c0b7e995b81ff426d0655c21840e7f0b086462b1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/GuessWhatGame.sol": "project/contracts/GuessWhatGame.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/GuessWhatGame.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract GuessWhatGame is ReentrancyGuard, Ownable {\n    struct Game {\n        uint256 gameId;\n        string topWord;\n        bytes32 middleWordHash; // SECURITY: Hashed instead of plaintext\n        string bottomWord;\n        uint256 entryFee;\n        uint256 totalPrize;\n        uint256 basePrizeAmount; // Base prize amount for winning (from treasury)\n        uint256 startTime;\n        bool isActive;\n        bool isCompleted;\n        address winner;\n        mapping(address => bool) players;\n        mapping(address => string) playerGuesses;\n    }\n\n    struct PlayerStats {\n        uint256 gamesPlayed;\n        uint256 guessesPlayed;\n        uint256 correctGuesses;\n        uint256 totalWinnings;\n        uint256 accuracy; // in basis points (10000 = 100%)\n    }\n\n    // State variables\n    uint256 public nextGameId = 1;\n    uint256 public platformFeePercent = 5; // 5% default platform fee\n    uint256 public treasuryBalance; // Treasury for prize pools\n    uint256 public defaultPrizeMultiplier = 10; // Base prize = entry fee * multiplier\n    \n    mapping(uint256 => Game) public games;\n    mapping(address => PlayerStats) public playerStats;\n    mapping(address => uint256[]) public playerGames;\n    \n    // Admin management\n    mapping(address => bool) public admins;\n    address[] public adminList;\n    \n    // Events\n    event GameCreated(uint256 indexed gameId, uint256 entryFee, uint256 basePrizeAmount);\n    event PlayerJoined(uint256 indexed gameId, address indexed player, uint256 entryFee);\n    event GuessSubmitted(uint256 indexed gameId, address indexed player, string guess);\n    event GameWon(uint256 indexed gameId, address indexed winner, uint256 prize);\n    event GameExpired(uint256 indexed gameId, uint256 totalPrize);\n    event PrizeClaimed(uint256 indexed gameId, address indexed winner, uint256 amount);\n    event AdminAdded(address indexed admin);\n    event AdminRemoved(address indexed admin);\n    event TreasuryFunded(address indexed funder, uint256 amount);\n    event TreasuryWithdrawn(address indexed recipient, uint256 amount);\n    event PrizeMultiplierUpdated(uint256 oldMultiplier, uint256 newMultiplier);\n    event PlatformFeeUpdated(uint256 oldFee, uint256 newFee);\n\n    // Constructor\n    constructor(address initialOwner, address[] memory initialAdmins) Ownable(initialOwner) {\n        // Add initial admins\n        for (uint256 i = 0; i < initialAdmins.length; i++) {\n            if (initialAdmins[i] != address(0)) {\n                admins[initialAdmins[i]] = true;\n                adminList.push(initialAdmins[i]);\n                emit AdminAdded(initialAdmins[i]);\n            }\n        }\n    }\n\n    // Modifiers\n    modifier gameExists(uint256 _gameId) {\n        require(_gameId > 0 && _gameId < nextGameId, \"Game does not exist\");\n        _;\n    }\n\n    modifier gameActive(uint256 _gameId) {\n        require(games[_gameId].isActive, \"Game is not active\");\n        _;\n    }\n\n\n    modifier onlyAdmin() {\n        require(admins[msg.sender] || msg.sender == owner(), \"Only admin or owner\");\n        _;\n    }\n\n    // Functions\n    function createGame(\n        string memory _topWord,\n        bytes32 _middleWordHash,\n        string memory _bottomWord,\n        uint256 _entryFee\n    ) external onlyAdmin returns (uint256) {\n        require(_entryFee > 0, \"Entry fee must be greater than 0\");\n        require(_middleWordHash != bytes32(0), \"Middle word hash cannot be empty\");\n        \n        uint256 gameId = nextGameId++;\n        Game storage game = games[gameId];\n        \n        // Calculate base prize amount from treasury (entry fee * multiplier)\n        uint256 basePrize = _entryFee * defaultPrizeMultiplier;\n        require(treasuryBalance >= basePrize, \"Insufficient treasury balance\");\n        \n        game.gameId = gameId;\n        game.topWord = _topWord;\n        game.middleWordHash = _middleWordHash;\n        game.bottomWord = _bottomWord;\n        game.entryFee = _entryFee;\n        game.basePrizeAmount = basePrize;\n        game.totalPrize = 0; // Grows as players guess\n        game.startTime = block.timestamp;\n        game.isActive = true;\n        game.isCompleted = false;\n        game.winner = address(0);\n        \n        emit GameCreated(gameId, _entryFee, basePrize);\n        return gameId;\n    }\n\n    // joinGame() removed - players auto-join on first guess for better UX\n\n    function submitGuess(uint256 _gameId, string memory _guess) external payable gameExists(_gameId) gameActive(_gameId) nonReentrant {\n        Game storage game = games[_gameId];\n        require(msg.value == game.entryFee, \"Incorrect entry fee\");\n        \n        // Get player stats storage reference once\n        PlayerStats storage stats = playerStats[msg.sender];\n        \n        // Auto-join on first guess (seamless UX - no separate join needed)\n        if (!game.players[msg.sender]) {\n            game.players[msg.sender] = true;\n            playerGames[msg.sender].push(_gameId);\n            \n            // Update player stats - first time playing this game\n            stats.gamesPlayed++;\n            \n            // Recalculate accuracy\n            if (stats.gamesPlayed > 0) {\n                stats.accuracy = (stats.correctGuesses * 10000) / stats.gamesPlayed;\n            }\n            \n            emit PlayerJoined(_gameId, msg.sender, msg.value);\n        }\n        \n        // Add entry fee to accumulated prize pool\n        game.totalPrize += msg.value;\n        \n        // Update player stats - increment guesses played\n        stats.guessesPlayed++;\n        \n        // Store the latest guess\n        game.playerGuesses[msg.sender] = _guess;\n        \n        // SECURITY: Compare hash of guess with stored hash\n        // This prevents reading the answer from contract storage\n        if (keccak256(bytes(_guess)) == game.middleWordHash) {\n            _endGame(_gameId, msg.sender);\n        } else {\n            // Incorrect guess - add to treasury\n            treasuryBalance += msg.value;\n        }\n        \n        emit GuessSubmitted(_gameId, msg.sender, _guess);\n    }\n\n    function _endGame(uint256 _gameId, address _winner) internal {\n        Game storage game = games[_gameId];\n        game.isActive = false;\n        game.isCompleted = true;\n        game.winner = _winner;\n        \n        // Total prize = base prize from treasury + accumulated guesses (minus last correct guess)\n        // Note: game.totalPrize includes the winning guess fee, which we already added to treasury\n        // So we need to subtract it back out\n        uint256 accumulatedPrize = game.totalPrize > game.entryFee ? game.totalPrize - game.entryFee : 0;\n        uint256 totalPrizeAmount = game.basePrizeAmount + accumulatedPrize;\n        \n        // Calculate platform fee from total\n        uint256 platformFee = (totalPrizeAmount * platformFeePercent) / 100;\n        uint256 winnerPrize = totalPrizeAmount - platformFee;\n        \n        // Deduct base prize from treasury\n        require(treasuryBalance >= game.basePrizeAmount, \"Insufficient treasury\");\n        treasuryBalance -= game.basePrizeAmount;\n        \n        // Update player stats\n        PlayerStats storage stats = playerStats[_winner];\n        stats.correctGuesses++;\n        stats.totalWinnings += winnerPrize;\n        // Calculate accuracy: correctGuesses / gamesPlayed\n        if (stats.gamesPlayed > 0) {\n            stats.accuracy = (stats.correctGuesses * 10000) / stats.gamesPlayed;\n        }\n        \n        // Transfer prize to winner (base from treasury + accumulated from guesses)\n        if (winnerPrize > 0) {\n            payable(_winner).transfer(winnerPrize);\n        }\n        \n        // Transfer platform fee to owner\n        if (platformFee > 0) {\n            payable(owner()).transfer(platformFee);\n        }\n        \n        emit GameWon(_gameId, _winner, winnerPrize);\n    }\n\n    // expireGame function removed - games don't expire\n\n    function getGameInfo(uint256 _gameId) external view gameExists(_gameId) returns (\n        uint256 gameId,\n        string memory topWord,\n        uint256 middleWordLength,\n        string memory bottomWord,\n        uint256 entryFee,\n        uint256 totalPrize,\n        uint256 basePrizeAmount,\n        uint256 startTime,\n        bool isActive,\n        bool isCompleted,\n        address winner\n    ) {\n        Game storage game = games[_gameId];\n        // SECURITY: Don't return the hash, only metadata\n        // Calculate middle word length from hash (not directly available, return 0 for now)\n        return (\n            game.gameId,\n            game.topWord,\n            0, // middleWordLength - not available from hash\n            game.bottomWord,\n            game.entryFee,\n            game.totalPrize,\n            game.basePrizeAmount,\n            game.startTime,\n            game.isActive,\n            game.isCompleted,\n            game.winner\n        );\n    }\n\n    function getPlayerStats(address _player) external view returns (\n        uint256 gamesPlayed,\n        uint256 guessesPlayed,\n        uint256 correctGuesses,\n        uint256 totalWinnings,\n        uint256 accuracy\n    ) {\n        PlayerStats storage stats = playerStats[_player];\n        return (\n            stats.gamesPlayed,\n            stats.guessesPlayed,\n            stats.correctGuesses,\n            stats.totalWinnings,\n            stats.accuracy\n        );\n    }\n\n    function getPlayerGames(address _player) external view returns (uint256[] memory) {\n        return playerGames[_player];\n    }\n\n    function isPlayerInGame(uint256 _gameId, address _player) external view gameExists(_gameId) returns (bool) {\n        return games[_gameId].players[_player];\n    }\n\n    function hasPlayerGuessed(uint256 _gameId, address _player) external view gameExists(_gameId) returns (bool) {\n        return bytes(games[_gameId].playerGuesses[_player]).length > 0;\n    }\n\n    function getPlayerGuess(uint256 _gameId, address _player) external view gameExists(_gameId) returns (string memory) {\n        return games[_gameId].playerGuesses[_player];\n    }\n\n    function getRandomActiveGame() external view returns (uint256) {\n        require(nextGameId > 1, \"No games exist\");\n        \n        // Get all active games\n        uint256[] memory activeGames = new uint256[](nextGameId - 1);\n        uint256 activeCount = 0;\n        \n        for (uint256 i = 1; i < nextGameId; i++) {\n            if (games[i].isActive && !games[i].isCompleted) {\n                activeGames[activeCount] = i;\n                activeCount++;\n            }\n        }\n        \n        require(activeCount > 0, \"No active games available\");\n        \n        // Use block timestamp as seed for randomness\n        uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) % activeCount;\n        return activeGames[randomIndex];\n    }\n\n    function getActiveGamesCount() external view returns (uint256) {\n        uint256 count = 0;\n        for (uint256 i = 1; i < nextGameId; i++) {\n            if (games[i].isActive && !games[i].isCompleted) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    function isOwner(address _address) external view returns (bool) {\n        return _address == owner();\n    }\n\n    // Admin management functions\n    function addAdmin(address _admin) external onlyOwner {\n        require(_admin != address(0), \"Invalid address\");\n        require(!admins[_admin], \"Already an admin\");\n        \n        admins[_admin] = true;\n        adminList.push(_admin);\n        emit AdminAdded(_admin);\n    }\n\n    function removeAdmin(address _admin) external onlyOwner {\n        require(admins[_admin], \"Not an admin\");\n        require(_admin != owner(), \"Cannot remove owner\");\n        \n        admins[_admin] = false;\n        \n        // Remove from adminList\n        for (uint256 i = 0; i < adminList.length; i++) {\n            if (adminList[i] == _admin) {\n                adminList[i] = adminList[adminList.length - 1];\n                adminList.pop();\n                break;\n            }\n        }\n        \n        emit AdminRemoved(_admin);\n    }\n\n    function isAdmin(address _address) external view returns (bool) {\n        return admins[_address] || _address == owner();\n    }\n\n    function getAdminList() external view returns (address[] memory) {\n        return adminList;\n    }\n\n    function getAdminCount() external view returns (uint256) {\n        return adminList.length;\n    }\n\n    // Treasury management functions\n    function fundTreasury() external payable onlyAdmin {\n        require(msg.value > 0, \"Must send funds\");\n        treasuryBalance += msg.value;\n        emit TreasuryFunded(msg.sender, msg.value);\n    }\n    \n    function withdrawFromTreasury(uint256 _amount) external onlyOwner nonReentrant {\n        require(_amount > 0, \"Amount must be greater than 0\");\n        require(treasuryBalance >= _amount, \"Insufficient treasury balance\");\n        \n        treasuryBalance -= _amount;\n        payable(owner()).transfer(_amount);\n        emit TreasuryWithdrawn(owner(), _amount);\n    }\n    \n    function setPrizeMultiplier(uint256 _multiplier) external onlyOwner {\n        require(_multiplier > 0, \"Multiplier must be greater than 0\");\n        uint256 oldMultiplier = defaultPrizeMultiplier;\n        defaultPrizeMultiplier = _multiplier;\n        emit PrizeMultiplierUpdated(oldMultiplier, _multiplier);\n    }\n    \n    function setPlatformFee(uint256 _feePercent) external onlyOwner {\n        require(_feePercent <= 50, \"Fee cannot exceed 50%\");\n        uint256 oldFee = platformFeePercent;\n        platformFeePercent = _feePercent;\n        emit PlatformFeeUpdated(oldFee, _feePercent);\n    }\n    \n    function getTreasuryBalance() external view returns (uint256) {\n        return treasuryBalance;\n    }\n\n    // Emergency functions\n    function emergencyWithdraw() external onlyOwner nonReentrant {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No funds to withdraw\");\n        payable(owner()).transfer(balance);\n    }\n    \n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // Emergency function to close a game and return accumulated prizes\n    function emergencyCloseGame(uint256 _gameId) external onlyAdmin nonReentrant {\n        Game storage game = games[_gameId];\n        require(game.isActive, \"Game is not active\");\n        \n        uint256 accumulatedPrize = game.totalPrize;\n        \n        game.isActive = false;\n        game.isCompleted = true;\n        game.totalPrize = 0; // Prevent re-entrancy\n        \n        // Return accumulated prizes to treasury\n        if (accumulatedPrize > 0) {\n            treasuryBalance += accumulatedPrize;\n        }\n        \n        emit GameExpired(_gameId, accumulatedPrize);\n    }\n}\n"
      }
    }
  }
}